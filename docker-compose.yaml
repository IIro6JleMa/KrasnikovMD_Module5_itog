version: '3.8'

services:
  db:
    build:
      context: ./db_image
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:${PGDATA}
    command: >
      bash -c "mkdir -p ${PGDATA} &&
      touch ${PGDATA}/postgresql.conf &&
      touch ${PGDATA}/pg_hba.conf &&
      mkdir -p ${PG_ARCHIVE} &&
      chown -R postgres:postgres ${PG_ARCHIVE} &&
      echo 'host replication ${REPL_POSTGRES_USER} 0.0.0.0/0 trust' >> ${PGDATA}/pg_hba.conf &&
      echo 'host replication ${REPL_POSTGRES_USER} 0.0.0.0/0 md5' >> ${PGDATA}/pg_hba.conf &&
      echo 'local   all             all                                     trust' >> ${PGDATA}/pg_hba.conf &&
      echo 'host    all             all             0.0.0.0/0               trust' >> ${PGDATA}/pg_hba.conf &&
      exec docker-entrypoint.sh postgres -c config_file=${PGDATA}/postgresql.conf \
        -c hba_file=${PGDATA}/pg_hba.conf \
        -c listen_addresses='*' \
        -c wal_level=replica \
        -c archive_mode=on \
        -c archive_command='cp %p ${PG_ARCHIVE}/%f' \
        -c max_wal_senders=10 \
        -c hot_standby=on \
        -c logging_collector=on \
        -c log_directory='/var/log/postgresql/' \
        -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log' \
        -c log_connections=on \
        -c log_disconnections=on \
        -c log_replication_commands=on \
        -c max_connections=100 \
        -c shared_buffers=128MB &&
      chmod 666 /var/log/postgresql/postgresql-*.log"

  bot:
    build:
      context: ./bot_image
    container_name: telegram_bot
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - TOKEN=${TOKEN}
      - RM_HOST=${RM_HOST}
      - RM_PORT=${RM_PORT}
      - RM_USER=${RM_USER}
      - RM_PASSWORD=${RM_PASSWORD}
    networks:
      - app-network
    depends_on:
      - db
    command: bash -c 'sleep 10 && python3 telegram_bot.py'

  db_repl:
    build:
      context: ./db_repl_image
    container_name: postgres_db_repl
    environment:
      - POSTGRES_USER=${REPL_POSTGRES_USER}
      - POSTGRES_PASSWORD=${REPL_POSTGRES_PASSWORD}
      - POSTGRES_DB=${REPL_POSTGRES_DB}
    networks:
      - app-network
    depends_on:
      - db
    ports:
      - "5433:5432"
    volumes:
      - postgres_repl_data:/var/lib/postgresql/data
    command: >
      bash -c 'sleep 15 && rm -rf /var/lib/postgresql/data/* &&
      PGPASSWORD="${REPL_POSTGRES_PASSWORD}" pg_basebackup -h db -D /var/lib/postgresql/data -U ${REPL_POSTGRES_USER} -v --write-recovery-conf &&
      exec docker-entrypoint.sh postgres -c config_file=/var/lib/postgresql/data/postgresql.conf -c hba_file=/var/lib/postgresql/data/pg_hba.conf'

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=${DATA_SOURCE_NAME}
    ports:
      - "9187:9187"  # Экспортер будет слушать на этом порту
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_repl_data:
