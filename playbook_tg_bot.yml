---
- hosts: db_primary
  become: yes
  vars:
    postgres_version: '15'
    db_name: 'db_emails_phones'
    db_user: 'postgres'
    db_password: 'maks'
    replication_user: 'repl_user'
    replication_password: 'maks'
    log_directory: '/var/log/postgresql'
  tasks:
    - name: Ensure locales are present (required for PostgreSQL setup)
      locale_gen:
        name: 'en_US.UTF-8'
        state: present

    - name: Add PostgreSQL APT repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install PostgreSQL
      apt:
        name:
          - "postgresql-{{ postgres_version }}"
          - "postgresql-contrib-{{ postgres_version }}"
        state: present

    - name: Ensure PostgreSQL is started and enabled
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Configure postgresql.conf - listen_addresses
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: '^#?(listen_addresses\s*=\s*).*'
        line: "listen_addresses = '*'"
        state: present

    - name: Configure postgresql.conf - wal_level
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: '^#?(wal_level\s*=\s*).*'
        line: "wal_level = replica"
        state: present

    - name: Configure postgresql.conf - max_wal_senders
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: '^#?(max_wal_senders\s*=\s*).*'
        line: "max_wal_senders = 10"
        state: present

    - name: Allow replication connections in pg_hba.conf
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        line: "host replication {{ replication_user }} 0.0.0.0/0 md5"
        state: present

    - name: Allow connections to database
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        line: "host    all             all             0.0.0.0/0               md5"
        state: present

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted

    - name: Set postgres password
      shell: |
        sudo -u postgres psql -c "ALTER USER {{ db_user }} WITH PASSWORD '{{ db_password }}';"
      become: yes

    - name: Check if database exists and create if necessary
      shell: |
        sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '{{ db_name }}'" | grep -q 1 || sudo -u postgres createdb -O {{ db_user }} {{ db_name }}
      become: yes

    - name: Check if replication user exists and create if necessary
      shell: |
        sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '{{ replication_user }}'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER {{ replication_user }} REPLICATION LOGIN ENCRYPTED PASSWORD '{{ replication_password }}';"
      become: yes

    - name: Set permissions for PostgreSQL log directory
      file:
        path: "{{ log_directory }}"
        mode: '0755'
        recurse: yes
        owner: postgres
        group: postgres

    - name: Set log file permissions to allow read access
      shell: |
        find {{ log_directory }} -type f -name "*.log" -exec chmod 644 {} \;

    - name: Add current user to postgres group
      user:
        name: "{{ ansible_user }}"
        groups: postgres
        append: yes

- hosts: bot_server
  become: yes
  vars:
    bot_directory: '/opt/telegram_bot'
    bot_token: '7589100658:AAEY52cYKY0J81shl7LRMBJE_0qU_7PNiks'
    db_host: '{{ hostvars["primary_db"]["ansible_host"] }}'
    db_user: 'postgres'
    db_password: 'maks'
    db_database: 'db_emails_phones'
    rm_host: '{{ hostvars["primary_db"]["ansible_host"] }}'
    rm_port: 22
    rm_user: 'krasnikovmaksimdmitrievich'
    rm_password: 'maks'
  tasks:
    - name: Install necessary packages
      apt:
        name:
          - python3
          - python3-pip
          - virtualenv
          - libpq-dev
          - python3-dev
          - gcc
        state: present
        update_cache: yes

    - name: Copy bot files from local machine to server
      copy:
        src: ./bot_image/
        dest: "{{ bot_directory }}/bot_image"
        mode: '0755'
        owner: root
        group: root

    - name: Copy requirements.txt to bot directory
      copy:
        src: ./requirements.txt
        dest: "{{ bot_directory }}/requirements.txt"

    - name: Create virtual environment
      command: "virtualenv -p python3 {{ bot_directory }}/venv"

    - name: Install Python dependencies
      pip:
        requirements: "{{ bot_directory }}/requirements.txt"
        virtualenv: "{{ bot_directory }}/venv"

    - name: Create .env file on bot server with your data
      copy:
        dest: "{{ bot_directory }}/bot_image/.env"
        content: |
          TOKEN={{ bot_token }}
          DB_HOST={{ db_host }}
          DB_USER={{ db_user }}
          DB_PASSWORD={{ db_password }}
          DB_DATABASE={{ db_database }}
          RM_HOST={{ rm_host }}
          RM_PORT={{ rm_port }}
          RM_USER={{ rm_user }}
          RM_PASSWORD={{ rm_password }}

    - name: Set permissions for .env file
      file:
        path: "{{ bot_directory }}/bot_image/.env"
        mode: '0600'

    - name: Create systemd service file for the bot
      copy:
        dest: /etc/systemd/system/telegram_bot.service
        content: |
          [Unit]
          Description=Telegram Bot Service
          After=network.target

          [Service]
          Type=simple
          User={{ ansible_user }}
          WorkingDirectory={{ bot_directory }}/bot_image
          EnvironmentFile={{ bot_directory }}/bot_image/.env
          ExecStart={{ bot_directory }}/venv/bin/python telegram_bot.py
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Set permissions for telegram_bot service file
      file:
        path: /etc/systemd/system/telegram_bot.service
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Ensure telegram_bot service is started and enabled
      systemd:
        name: telegram_bot
        state: started
        enabled: yes

- hosts: db_replica
  become: yes
  vars:
    postgres_version: '15'
    replication_user: 'repl_user'
    replication_password: 'maks'
    primary_db_host: '{{ hostvars["primary_db"]["ansible_host"] }}'
  tasks:
    - name: Ensure locales are present (required for PostgreSQL setup)
      locale_gen:
        name: 'en_US.UTF-8'
        state: present

    - name: Add PostgreSQL APT repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install PostgreSQL and dependencies
      apt:
        name:
          - "postgresql-{{ postgres_version }}"
          - "postgresql-contrib-{{ postgres_version }}"
          - python3-psycopg2
          - libpq-dev
          - python3-dev
        state: present

    - name: Stop PostgreSQL
      service:
        name: postgresql
        state: stopped

    - name: Remove old data directory
      file:
        path: "/var/lib/postgresql/{{ postgres_version }}/main"
        state: absent
        force: yes

    - name: Perform base backup
      shell: |
        sudo -u postgres bash -c "PGPASSWORD='{{ replication_password }}' pg_basebackup -h {{ primary_db_host }} -D /var/lib/postgresql/{{ postgres_version }}/main -U {{ replication_user }} -v -P --wal-method=stream"
      become: yes

    - name: Create standby.signal file
      file:
        path: "/var/lib/postgresql/{{ postgres_version }}/main/standby.signal"
        state: touch
        owner: postgres
        group: postgres
        mode: '0600'

    - name: Configure primary_conninfo
      blockinfile:
        path: "/var/lib/postgresql/{{ postgres_version }}/main/postgresql.auto.conf"
        marker: ""
        block: |
          primary_conninfo = 'host={{ primary_db_host }} port=5432 user={{ replication_user }} password={{ replication_password }}'

    - name: Ensure ownership and permissions of postgresql.auto.conf
      file:
        path: "/var/lib/postgresql/{{ postgres_version }}/main/postgresql.auto.conf"
        owner: postgres
        group: postgres
        mode: '0644'

    - name: Start PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes

- hosts: bot_server
  become: yes
  vars:
    bot_directory: '/opt/telegram_bot'
    bot_token: '7589100658:AAEY52cYKY0J81shl7LRMBJE_0qU_7PNiks'
    db_host: '{{ hostvars["primary_db"]["ansible_host"] }}'
    db_user: 'postgres'
    db_password: 'maks'
    db_database: 'db_emails_phones'
    rm_host: '{{ hostvars["primary_db"]["ansible_host"] }}'
    rm_port: 22
    rm_user: 'krasnikovmaksimdmitrievich'
    rm_password: 'maks'
  tasks:
    - name: Install necessary packages
      apt:
        name:
          - python3
          - python3-pip
          - virtualenv
          - libpq-dev
          - python3-dev
          - gcc
        state: present
        update_cache: yes

    - name: Copy bot files from local machine to server
      copy:
        src: ./bot_image/
        dest: "{{ bot_directory }}/bot_image"
        mode: '0755'
        owner: root
        group: root

    - name: Copy requirements.txt to bot directory
      copy:
        src: ./requirements.txt
        dest: "{{ bot_directory }}/requirements.txt"

    - name: Create virtual environment
      command: "virtualenv -p python3 {{ bot_directory }}/venv"

    - name: Install Python dependencies
      pip:
        requirements: "{{ bot_directory }}/requirements.txt"
        virtualenv: "{{ bot_directory }}/venv"

    - name: Create .env file on bot server with your data
      copy:
        dest: "{{ bot_directory }}/bot_image/.env"
        content: |
          TOKEN={{ bot_token }}
          DB_HOST={{ db_host }}
          DB_USER={{ db_user }}
          DB_PASSWORD={{ db_password }}
          DB_DATABASE={{ db_database }}
          RM_HOST={{ rm_host }}
          RM_PORT={{ rm_port }}
          RM_USER={{ rm_user }}
          RM_PASSWORD={{ rm_password }}

    - name: Set permissions for .env file
      file:
        path: "{{ bot_directory }}/bot_image/.env"
        mode: '0600'

    - name: Create systemd service file for the bot
      copy:
        dest: /etc/systemd/system/telegram_bot.service
        content: |
          [Unit]
          Description=Telegram Bot Service
          After=network.target

          [Service]
          Type=simple
          User={{ ansible_user }}
          WorkingDirectory={{ bot_directory }}/bot_image
          EnvironmentFile={{ bot_directory }}/bot_image/.env
          ExecStart={{ bot_directory }}/venv/bin/python telegram_bot.py
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Set permissions for telegram_bot service file
      file:
        path: /etc/systemd/system/telegram_bot.service
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Ensure telegram_bot service is started and enabled
      systemd:
        name: telegram_bot
        state: started
        enabled: yes
